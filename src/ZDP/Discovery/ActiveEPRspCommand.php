<?php

namespace Munisense\Zigbee\ZDP\Discovery;
use Munisense\Zigbee\AbstractFrame;
use Munisense\Zigbee\Buffer;
use Munisense\Zigbee\Exception\MuniZigbeeException;
use Munisense\Zigbee\ZDP\Command;
use Munisense\Zigbee\ZDP\IZDPCommandFrame;
use Munisense\Zigbee\ZDP\Status;

/**
 * Class ActiveEPRspCommand
 * @package Munisense\Zigbee\ZDP\Discovery
 *
 * The Active_EP_rsp is generated by a remote device in response to an
 * Active_EP_req directed to the remote device.
 */
class ActiveEPRspCommand extends AbstractFrame implements IZDPCommandFrame
  {
  private static $allowed_statusses = [Status::SUCCESS, Status::DEVICE_NOT_FOUND, Status::INV_REQUESTTYPE, Status::NO_DESCRIPTOR];

  private $status;
  private $nwk_addr_of_interest;
  private $active_ep_list = [];

  public static function constructSuccess($nwk_addr_of_interest, array $active_ep_list = [])
    {
    $frame = new self;
    $frame->setStatus(Status::SUCCESS);
    $frame->setNwkAddrOfInterest($nwk_addr_of_interest);
    $frame->setActiveEPList($active_ep_list);
    return $frame;
    }

  public static function constructFailure($status, $nwk_addr_of_interest)
    {
    $frame = new self;
    $frame->setStatus($status);
    $frame->setNwkAddrOfInterest($nwk_addr_of_interest);
    return $frame;
    }

  public function setFrame($frame)
    {
    $this->setStatus(Buffer::unpackInt8u($frame));
    $this->setNwkAddrOfInterest(Buffer::unpackInt16u($frame));

    if($this->getStatus() == Status::SUCCESS)
      {
      $active_ep_count = Buffer::unpackInt8u($frame);

      for($i = 0; $i < $active_ep_count; $i++)
        $this->addActiveEP(Buffer::unpackInt8u($frame));
      }
    }

  public function getFrame()
    {
    $frame = "";

    Buffer::packInt8u($frame, $this->getStatus());
    Buffer::packInt16u($frame, $this->getNwkAddrOfInterest());
    Buffer::packInt8u($frame, $this->getActiveEPCount());

    if($this->getStatus() == Status::SUCCESS)
      {
      foreach($this->getActiveEpList() as $active_ep)
        Buffer::packInt8u($frame, $active_ep);
      }

    return $frame;
    }

  public function getActiveEPCount()
    {
    return count($this->active_ep_list);
    }

  /**
   * @return int
   */
  public function getStatus()
    {
    return $this->status;
    }

  /**
   * @param $status
   * @throws \Munisense\Zigbee\Exception\MuniZigbeeException
   */
  public function setStatus($status)
    {
    if(in_array($status, self::$allowed_statusses))
      $this->status = $status;
    else
      throw new MuniZigbeeException("Invalid status supplied");
    }

  public function displayStatus()
    {
    return Status::displayStatus($this->getStatus());
    }

  /**
   * @return array
   */
  public static function getAllowedStatusses()
    {
    return self::$allowed_statusses;
    }

  /**
   * @param array $allowed_statusses
   */
  public static function setAllowedStatusses($allowed_statusses)
    {
    self::$allowed_statusses = $allowed_statusses;
    }

  /**
   * @return int
   */
  public function getNwkAddrOfInterest()
    {
    return $this->nwk_addr_of_interest;
    }

  /**
   * @param $nwk_address
   * @throws \Munisense\Zigbee\Exception\MuniZigbeeException
   */
  public function setNwkAddrOfInterest($nwk_address)
    {
    if($nwk_address >= 0x0000 && $nwk_address <= 0xffff)
      $this->nwk_addr_of_interest = $nwk_address;
    else
      throw new MuniZigbeeException("Invalid nwk address");
    }

  public function displayNwkAddrOfInterest()
    {
    return Buffer::displayInt16u($this->getNwkAddrOfInterest());
    }

  /**
   * @return array
   */
  public function getActiveEpList()
    {
    return $this->active_ep_list;
    }

  /**
   * @param array $active_ep_list
   */
  public function setActiveEpList($active_ep_list)
    {
    $this->active_ep_list = [];
    foreach($active_ep_list as $ep)
      $this->addActiveEP($ep);
    }

  public function addActiveEP($active_ep)
    {
    if($active_ep >= 0x00 && $active_ep <= 0xff)
      $this->active_ep_list[] = $active_ep;
    else
      throw new MuniZigbeeException("Active EP not in valid range of 0-255: ".$active_ep);
    }

  public function __toString()
    {
    $output = __CLASS__." (length: ".strlen($this->getFrame()).")".PHP_EOL;
    $output .= "|- Status    : ".$this->displayStatus().PHP_EOL;
    $output .= "|- NwkAddr     : ".$this->displayNwkAddrOfInterest().PHP_EOL;

    if($this->getStatus() == Status::SUCCESS)
      {
      $output .= "|- Active EP: ".implode(", ", array_map(function($ep) { return Buffer::displayInt8u($ep); }, $this->getActiveEpList()));
      }

    return $output;
    }

  /**
   * Returns the Cluster ID of this frame
   *
   * @return int
   */
  public function getClusterId()
    {
    return Command::COMMAND_ACTIVE_EP_RSP;
    }
  }

