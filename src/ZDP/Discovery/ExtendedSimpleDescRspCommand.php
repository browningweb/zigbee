<?php

namespace Munisense\Zigbee\ZDP\Discovery;
use Munisense\Zigbee\AbstractFrame;
use Munisense\Zigbee\Buffer;
use Munisense\Zigbee\Exception\ZigbeeException;
use Munisense\Zigbee\ZDP\Command;
use Munisense\Zigbee\ZDP\IZDPCommandFrame;
use Munisense\Zigbee\ZDP\Status;

/**
 * Class ExtendedSimpleDescRspCommand
 * @package Munisense\Zigbee\ZDP\Discovery
 *
 * The Simple_Desc_rsp is generated by a remote device in response to a
 * Simple_Desc_req directed to the remote device.
 */
class ExtendedSimpleDescRspCommand extends AbstractFrame implements IZDPCommandFrame
  {
  private static $allowed_statusses = [Status::SUCCESS, Status::INVALID_EP, Status::NOT_ACTIVE,
                                       Status::DEVICE_NOT_FOUND, Status::INV_REQUESTTYPE, Status::NO_DESCRIPTOR];

  private $status = 0;
  private $nwk_addr_of_interest = 0;
  private $endpoint = 0;
  private $app_input_cluster_count = 0;
  private $app_output_cluster_count = 0;
  private $start_index = 0;
  private $app_cluster_list = [];

  public static function constructSuccess($nwk_addr_of_interest, $endpoint, $app_input_cluster_count, $app_output_cluster_count, $start_index, array $app_cluster_list)
    {
    $frame = new self;
    $frame->setStatus(Status::SUCCESS);
    $frame->setNwkAddrOfInterest($nwk_addr_of_interest);
    $frame->setEndpoint($endpoint);
    $frame->setAppInputClusterCount($app_input_cluster_count);
    $frame->setAppOutputClusterCount($app_output_cluster_count);
    $frame->setStartIndex($start_index);
    $frame->setAppClusterList($app_cluster_list);
    return $frame;
    }

  public static function constructFailure($status, $nwk_addr_of_interest, $endpoint, $app_input_cluster_count, $app_output_cluster_count, $start_index)
    {
    $frame = new self;
    $frame->setStatus($status);
    $frame->setNwkAddrOfInterest($nwk_addr_of_interest);
    $frame->setEndpoint($endpoint);
    $frame->setAppInputClusterCount($app_input_cluster_count);
    $frame->setAppOutputClusterCount($app_output_cluster_count);
    $frame->setStartIndex($start_index);
    return $frame;
    }

  public function setFrame($frame)
    {
    $this->setStatus(Buffer::unpackInt8u($frame));
    $this->setNwkAddrOfInterest(Buffer::unpackInt16u($frame));
    $this->setEndpoint(Buffer::unpackInt8u($frame));
    $this->setAppInputClusterCount(Buffer::unpackInt8u($frame));
    $this->setAppOutputClusterCount(Buffer::unpackInt8u($frame));
    $this->setStartIndex(Buffer::unpackInt8u($frame));

    while(strlen($frame) > 0)
      $this->addAppClusterListElement(Buffer::unpackInt16u($frame));
    }

  public function getFrame()
    {
    $frame = "";

    Buffer::packInt8u($frame, $this->getStatus());
    Buffer::packInt16u($frame, $this->getNwkAddrOfInterest());
    Buffer::packInt8u($frame, $this->getEndpoint());
    Buffer::packInt8u($frame, $this->getAppInputClusterCount());
    Buffer::packInt8u($frame, $this->getAppOutputClusterCount());
    Buffer::packInt8u($frame, $this->getStartIndex());

    if($this->getStatus() == Status::SUCCESS)
      foreach($this->getAppClusterList() as $cluster_id)
        Buffer::packInt16u($frame, $cluster_id);

    return $frame;
    }

  /**
   * @return int
   */
  public function getStatus()
    {
    return $this->status;
    }

  /**
   * @param $status
   * @throws \Munisense\Zigbee\Exception\ZigbeeException
   */
  public function setStatus($status)
    {
    if(in_array($status, self::$allowed_statusses))
      $this->status = $status;
    else
      throw new ZigbeeException("Invalid status supplied");
    }

  public function displayStatus()
    {
    return Status::displayStatus($this->getStatus());
    }

  /**
   * @return array
   */
  public static function getAllowedStatusses()
    {
    return self::$allowed_statusses;
    }

  /**
   * @param array $allowed_statusses
   */
  public static function setAllowedStatusses($allowed_statusses)
    {
    self::$allowed_statusses = $allowed_statusses;
    }

  /**
   * @return int
   */
  public function getNwkAddrOfInterest()
    {
    return $this->nwk_addr_of_interest;
    }

  /**
   * @param $nwk_address
   * @throws \Munisense\Zigbee\Exception\ZigbeeException
   */
  public function setNwkAddrOfInterest($nwk_address)
    {
    if($nwk_address >= 0x0000 && $nwk_address <= 0xffff)
      $this->nwk_addr_of_interest = $nwk_address;
    else
      throw new ZigbeeException("Invalid nwk address");
    }

  public function displayNwkAddrOfInterest()
    {
    return Buffer::displayInt16u($this->getNwkAddrOfInterest());
    }

  public function setStartIndex($start_index)
    {
    $start_index = intval($start_index);
    if($start_index < 0x00 || $start_index > 0xff)
      throw new ZigbeeException("Invalid start index");

    $this->start_index = $start_index;
    }

  public function getStartIndex()
    {
    return $this->start_index;
    }

  public function displayStartIndex()
    {
    return sprintf("0x%02x", $this->getStartIndex());
    }

  public function setAppInputClusterCount($app_input_cluster_count)
    {
    $app_input_cluster_count = intval($app_input_cluster_count);
    if($app_input_cluster_count < 0x00 || $app_input_cluster_count > 0xff)
      throw new ZigbeeException("Invalid App Input Cluster Count");

    $this->app_input_cluster_count = $app_input_cluster_count;
    }

  public function getAppInputClusterCount()
    {
    return $this->app_input_cluster_count;
    }

  public function displayAppInputClusterCount()
    {
    return sprintf("0x%02x", $this->getAppInputClusterCount());
    }

  public function setAppOutputClusterCount($app_output_cluster_count)
    {
    $app_output_cluster_count = intval($app_output_cluster_count);
    if($app_output_cluster_count < 0x00 || $app_output_cluster_count > 0xff)
      throw new ZigbeeException("Invalid App Output Cluster Count");

    $this->app_output_cluster_count = $app_output_cluster_count;
    }

  public function getAppOutputClusterCount()
    {
    return $this->app_output_cluster_count;
    }

  public function displayAppOutputClusterCount()
    {
    return sprintf("0x%02x", $this->getAppOutputClusterCount());
    }

  /**
   * @return int
   */
  public function getEndpoint()
    {
    return $this->endpoint;
    }

  /**
   * @param int $endpoint
   * @throws \Munisense\Zigbee\Exception\ZigbeeException
   */
  public function setEndpoint($endpoint)
    {
    if($endpoint >= 1 && $endpoint <= 240)
      $this->endpoint = $endpoint;
    else
      throw new ZigbeeException("Endpoint must be between 1 and 240");
    }

  public function displayEndpoint()
    {
    return sprintf("0x%02x", $this->getEndpoint());
    }

  public function getAppClusterList()
    {
    return $this->app_cluster_list;
    }

  public function setAppClusterList(array $app_cluster_list = [])
    {
    $this->app_cluster_list = [];
    foreach($app_cluster_list as $cluster_id)
      $this->addAppClusterListElement($cluster_id);
    }

  /**
   * @param $cluster_id int Cluster ID to add to the list
   * @throws \Munisense\Zigbee\Exception\ZigbeeException
   */
  public function addAppClusterListElement($cluster_id)
    {
    if($cluster_id >= 0x0000 && $cluster_id <= 0xffff)
      $this->app_cluster_list[] = $cluster_id;
    else
      throw new ZigbeeException("Cluster ID must be in the range of 0x0000 - 0xffff: ".$cluster_id);
    }

  public function displayAppClusterList()
    {
    return implode(", ", array_map(function($cluster_id) { return sprintf("0x%04x", $cluster_id); }, $this->getAppClusterList()));
    }

  public function __toString()
    {
    $output = __CLASS__." (length: ".strlen($this->getFrame()).")".PHP_EOL;
    $output .= "|- Status               : ".$this->displayStatus().PHP_EOL;
    $output .= "|- NwkAddr              : ".$this->displayNwkAddrOfInterest().PHP_EOL;
    $output .= "|- Endpoint             : ".$this->displayEndpoint().PHP_EOL;
    $output .= "|- Start Index          : ".$this->displayStartIndex().PHP_EOL;
    $output .= "|- Input Cluster Count  : ".$this->displayAppInputClusterCount().PHP_EOL;
    $output .= "|- Output Cluster Count : ".$this->displayAppOutputClusterCount().PHP_EOL;

    if($this->getStatus() == Status::SUCCESS)
      $output .= "`- Cluster List         : ".$this->displayAppClusterList().PHP_EOL;

    return $output;
    }

  /**
   * Returns the Cluster ID of this frame
   *
   * @return int
   */
  public function getClusterId()
    {
    return Command::COMMAND_EXTENDED_SIMPLE_DESC_RSP;
    }
  }

